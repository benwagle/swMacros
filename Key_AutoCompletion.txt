'Version 1.02
'How to use
'Open Properties file and CFM files that are using this properties file
'Ex. Open test.properties and all CFM Files that are using test.properties file
'This macro will find illegal key that violate camel case rule connected with underscore(_)
'Example of illegal key name
'oldKey
'Hello_
'Hello__M1
'It_Is_degree_wtag_How_Are_Y
'Please let me(David) know the other illegal key name case, if you find
'Enter the new key inside of popup input box
'It would change every test.test.oldkey to test.test.newkey
'File name and folder name is derived from the current properties file name
'Create c:\result.txt
'The result will be logged in this file

Imports System
Imports EnvDTE
Imports EnvDTE80
Imports EnvDTE90
Imports EnvDTE90a
Imports EnvDTE100
Imports System.Diagnostics
Imports System.Collections.Generic
Imports System.Text.RegularExpressions
Imports System.Windows.Forms
Imports System.Globalization
Imports System.Collections
Imports System.Resources
Imports System.Text.RegularExpressions.Regex


Module Key_AutoCompletion

    Dim Dict = CreateObject("Scripting.Dictionary")



    'To Do Creating Current Key and value inside of dictionary
    'Integrate with key checker and global changer
    'Check incompleted word

    Sub Key_Checker()
        Dim pattern As String = "\b[A-Z][a-zA-Z]*(_[A-Z][a-z0-9]*)*\b"
        Dim file As System.IO.File
        Dim reader As System.IO.StreamReader
        Dim line As String
        Dim results As String = ""
        Dim rgx As New Regex(pattern)
        Dim newkey As String
        Dim currentKey As String
        Dim currentValue As String
        Dim keysize As Integer = 4 'Default keysize is four words
        Dim f_Collision As Boolean
        reader = file.OpenText(DTE.ActiveDocument.FullName)

        'Dim Dict As New Dictionary(Of String, String)

 
        Dict.CompareMode = 1

        While reader.Peek <> -1
            line = reader.ReadLine()
            Dict.Add(line.Split("=")(0), line.Split("=")(1))
        End While

        reader.Close()




        For Each key In Dict.Keys
            currentKey = key
            currentValue = Dict(key)
            If rgx.IsMatch(currentKey) = False Then
                Dim i = 0
                Do
                    newkey = Key_Selection(currentValue, keysize + i)
                    i = i + 1
                Loop Until Not isColision(Dict, newkey)
                Global_Key_changer(currentKey, newkey)
            End If
        Next

        reader.Close()

        'DTE.ActiveDocument.Save()
        DTE.ExecuteCommand("File.SaveAll")

    End Sub

    Function Key_Selection(Optional ByVal s As String = "This is the Test", Optional ByVal keysize As Integer = 4)
        Dim key As String
        Dim keyname_candidate As String()

        Dim i As Integer = 0
        s = s.Trim
        s = RemoveNonWordCharacters(s)
        keyname_candidate = Regex.Split(s, "[\s_]+")

        'Taking the [keysize] numbers of the world and create key in accordance with camel case style variable naming
        key = keyname_candidate(0).Chars(0).ToString().ToUpper + keyname_candidate(0).Substring(1).ToLower
        i = 1
        While (i < keysize And i < keyname_candidate.Length)
            key = key + "_" + keyname_candidate(i).Chars(0).ToString().ToUpper + keyname_candidate(i).Substring(1).ToLower
            i = i + 1
        End While

        Return key
    End Function

    Function isColision(ByRef dict As Object, Optional ByVal key As String = "This is Test")
        Dim flag As Boolean
        flag = dict.exists(key)
        Return flag
    End Function


    Function RemoveNonWordCharacters(ByVal s As String)
        Dim pattern As String = ":"
        Dim replacement As String = "_Colon"
        Dim rgx As New Regex(pattern)
        Dim result As String = rgx.Replace(s, replacement)
        s = result

        pattern = "[^\w^\s]"
        replacement = ""
        Dim rgx2 As New Regex(pattern)
        result = rgx2.Replace(s, replacement)
        Return result
    End Function



    Sub Global_Key_changer(ByVal current_key As String, ByVal new_key As String)
        Dim new_key_full_name As String
        Dim Full_Path As String()
        Dim Folder_Name As String
        Dim Current_Folder As String ' = Under Resource Folder
        Dim current_key_full_name As String

        Dim propsWindowName As String '= "Home.properties" 'Change per props file
        Dim propsFileName As String
        Dim propsFilePath As String = "C:\Source\trunk\sw\swchannel\Resources\"
        Dim dotProperties As String = ".properties"
        Dim useResourcesKey As String
        Dim resourcekey As String()
        Const ForReading = 1, ForWriting = 2, ForAppending = 8
        Dim fso, f
        fso = CreateObject("Scripting.FileSystemObject")
        f = fso.OpenTextFile("c:\result.txt", ForAppending, False)

        ' Current Folder Name : First Component of Key
        'new_key = InputBox("Enter your key name", "Input Required", current_key)
        Folder_Name = DTE.ActiveDocument.Path
        Full_Path = Folder_Name.Split("\")
        For i = Full_Path.Length - 1 To 1 Step -1
            If "".IsNullOrWhiteSpace(Full_Path(i)) = False Then
                Current_Folder = Full_Path(i)
                Exit For
            End If
        Next

        ' Current Properties File Name : Second Component of Key
        If "".IsNullOrWhiteSpace(DTE.ActiveDocument.Name.Split(".")(0)) = False Then
            propsFileName = DTE.ActiveDocument.Name.Split(".")(0)
        End If



        'Error Handling For Not Exsiting Folde and File Name
        If "".IsNullOrWhiteSpace(Current_Folder) Or "".IsNullOrWhiteSpace(propsFileName) Or "".IsNullOrWhiteSpace(new_key) Then
            MsgBox("Failed To Find Full Key Name")
            Exit Sub
        End If

        'Replace in Properties File

        'Replace in CFM Files
        new_key_full_name = Current_Folder + "." + propsFileName + "." + new_key
        current_key_full_name = Current_Folder + "." + propsFileName + "." + current_key

        DTE.ExecuteCommand("Edit.Replace")
        DTE.Find.Action = vsFindAction.vsFindActionReplaceAll
        DTE.Find.FindWhat = current_key_full_name
        DTE.Find.ReplaceWith = new_key_full_name
        DTE.Find.Target = vsFindTarget.vsFindTargetOpenDocuments
        DTE.Find.MatchCase = True
        DTE.Find.MatchWholeWord = True
        DTE.Find.MatchInHiddenText = False
        DTE.Find.PatternSyntax = vsFindPatternSyntax.vsFindPatternSyntaxLiteral
        DTE.Find.ResultsLocation = vsFindResultsLocation.vsFindResultsNone

        If (DTE.Find.Execute() = vsFindResult.vsFindResultNotFound) Then
            MsgBox(current_key + "is not being used in the opening cfm files")
            'Throw New System.Exception("vsFindResultNotFound")
        End If

        DTE.Find.FindWhat = current_key + "=" + Dict(current_key)
        DTE.Find.ReplaceWith = new_key + "=" + Dict(current_key)
        DTE.Find.Target = vsFindTarget.vsFindTargetCurrentDocument

        'Log into C:\result.txt what changes to what
        Dim returnValue As vsFindResult
        returnValue = DTE.Find.Execute()

        If (returnValue = vsFindResult.vsFindResultNotFound) Then

            Throw New System.Exception("vsFindResultNotFound")

        ElseIf (returnValue = vsFindResult.vsFindResultReplaced) Then

            f.WriteLine(current_key + "->" + new_key)

        End If


        DTE.Windows.Item("{CF2DDC32-8CAD-11D2-9302-005345000000}").Close()
        f.close()


    End Sub
End Module
